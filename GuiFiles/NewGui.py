#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 09, 2021 01:48:04 PM +0300  platform: Windows NT
import os
import sys

from GuiFiles import GeneralConfigurations

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Home_Screen(root)
    # NewGui_support.init(root, top)
    root.mainloop()


w = None


def create_Home_Screen(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Home_Screen(root, *args, **kwargs)' .'''
    global w, w_win, root, top_level
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Home_Screen(w)
    # NewGui_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Home_Screen():
    global w, root
    root.destroy()
    GeneralConfigurations.vp_start_gui()
    root = None


class Home_Screen:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        w = 732
        h = 305
        ws = top.winfo_screenwidth()
        hs = top.winfo_screenheight()
        x = (ws / 2) - (w / 2)
        y = (hs / 2) - (h / 2)
        top.geometry('%dx%d+%d+%d' % (w, h, x, y))
        # top.geometry("732x305+559+379") # +559+379 is the location of window on screen
        top.resizable(False, False)
        top.title("Al-Ghazali's Authorship Attribution")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.new_training_button = tk.Button(top, command=destroy_Home_Screen)
        self.new_training_button.place(x=350, y=70, height=54, width=337)
        self.new_training_button.configure(activebackground="#ececec")
        self.new_training_button.configure(activeforeground="#000000")
        self.new_training_button.configure(background="#629b1c")
        self.new_training_button.configure(disabledforeground="#a3a3a3")
        self.new_training_button.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.new_training_button.configure(foreground="#ffffff")
        self.new_training_button.configure(highlightbackground="#d9d9d9")
        self.new_training_button.configure(highlightcolor="black")
        self.new_training_button.configure(pady="0")
        self.new_training_button.configure(text='''New Training''')

        self.load_trained_model_button = tk.Button(top)
        self.load_trained_model_button.place(x=350, y=150, height=54, width=337)
        self.load_trained_model_button.configure(activebackground="#ececec")
        self.load_trained_model_button.configure(activeforeground="#000000")
        self.load_trained_model_button.configure(background="#629b1c")
        self.load_trained_model_button.configure(disabledforeground="#a3a3a3")
        self.load_trained_model_button.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.load_trained_model_button.configure(foreground="#ffffff")
        self.load_trained_model_button.configure(highlightbackground="#d9d9d9")
        self.load_trained_model_button.configure(highlightcolor="black")
        self.load_trained_model_button.configure(pady="0")
        self.load_trained_model_button.configure(text='''Load Trained Model''')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(x=300, y=40, height=200)
        self.TSeparator1.configure(orient="vertical")

        self.main_ghazali_label = tk.Label(top)
        self.main_ghazali_label.place(x=30, y=217, height=27, width=245)
        self.main_ghazali_label.configure(activebackground="#f9f9f9")
        self.main_ghazali_label.configure(activeforeground="black")
        self.main_ghazali_label.configure(background="#ffffff")
        self.main_ghazali_label.configure(disabledforeground="#a3a3a3")
        self.main_ghazali_label.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.main_ghazali_label.configure(foreground="#629b1c")
        self.main_ghazali_label.configure(highlightbackground="#d9d9d9")
        self.main_ghazali_label.configure(highlightcolor="black")
        self.main_ghazali_label.configure(text='''Al-Ghazali Authorship Analyzer''')

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(x=60, y=30, height=180, width=180)
        self.TLabel1.configure(background="#ffffff")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='center')
        photo_location = os.path.join("GuiFiles/Al-Ghazali-Home.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.TLabel1.configure(image=_img0)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(x=0, y=260, height=45, width=732)
        self.Frame1.configure(background="#eeeeee")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(x=159, y=12, height=21, width=396)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#eeeeee")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#919191")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Machine Learning tool for Authorship Attribution. Ort Braude, Spring 2021''')

        self.Label2 = tk.Label(top)
        self.Label2.place(x=450, y=30, height=21, width=134)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 10")
        self.Label2.configure(foreground="#9d9d9d")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Pick an option below''')


