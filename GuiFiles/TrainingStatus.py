#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 16, 2021 11:03:24 AM +0300  platform: Windows NT

import sys
import threading

import utils
from GuiFiles import ViewResults, CNNConfigurations

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import os.path
import sys
from concurrent import futures

thread_pool_executor = futures.ThreadPoolExecutor(max_workers=1)


def vp_start_gui():
    """Starting point when module is the main routine."""
    global root, top
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", exit_handler)
    top = Progress_Screen(root)
    root.mainloop()
    # run()


def show_results_button_click():
    global root
    utils.log_content = top.output_Text.get('1.0', 'end')
    root.destroy()
    ViewResults.vp_start_gui("CNN")
    root = None


class Work(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.lock = threading.Lock()
        self.event = threading.Event()
        self.setDaemon(True)

    def run(self):  # This function launch the thread
        from bert_ghazali import BERTGhazali_Attributer
        gatt = BERTGhazali_Attributer(
            bert_model_name="aubmindlab/bert-large-arabertv2",
            text_division_method=utils.params['TEXT_DIVISION_METHOD'],
            text_console=top.output_Text)
        gatt.run()
        proc_end()

    def stop(self):
        self.event.set()
        utils.stopped = True


def proc_start():
    # global top
    # start button disable
    top.output_Text.insert('end', 'Starting...\n')
    top.start_training_button.configure(text='''Processing..''')
    top.start_training_button.configure(activebackground="#ececec")
    top.start_training_button.configure(activeforeground="#000000")
    top.start_training_button.configure(background="#c0c0c0")
    top.start_training_button.configure(disabledforeground="#a3a3a3")
    top.start_training_button.configure(font="-family {Segoe UI} -size 11 -weight bold")
    top.start_training_button.configure(foreground="#ffffff")
    top.start_training_button.configure(highlightbackground="#d9d9d9")
    top.start_training_button.configure(highlightcolor="#000000")
    top.start_training_button.configure(pady="0")
    top.start_training_button.configure(relief="flat")
    top.start_training_button.configure(state='disabled')


def proc_end():
    # global top
    top.view_results_button.configure(activebackground="#ececec")
    top.view_results_button.configure(activeforeground="#000000")
    top.view_results_button.configure(background="#629b1c")
    top.view_results_button.configure(disabledforeground="#a3a3a3")
    top.view_results_button.configure(font="-family {Segoe UI} -size 11 -weight bold")
    top.view_results_button.configure(foreground="#ffffff")
    top.view_results_button.configure(highlightbackground="#d9d9d9")
    top.view_results_button.configure(highlightcolor="#000000")
    top.view_results_button.configure(state='normal')
    top.start_training_button.configure(text='''DONE''')


def ff():
    from bert_ghazali import BERTGhazali_Attributer
    utils.stopped = False
    utils.progress_bar = top.progress_bar
    gatt = BERTGhazali_Attributer(
        bert_model_name="aubmindlab/bert-large-arabertv2",
        text_division_method=utils.params['TEXT_DIVISION_METHOD'],
        text_console=top.output_Text)
    gatt.run()
    proc_end()


def start_training_click():
    global original_stdout, x
    proc_start()
    original_stdout = sys.stdout
    utils.stopped = False
    utils.progress_bar = top.progress_bar
    x = thread_pool_executor.submit(ff)

    # thread_pool_executor.shutdown()
    '''
    proc_start()
    utils.stopped = False
    utils.progress_bar = top.progress_bar
    original_stdout = sys.stdout
    run_thread = Work()
    # run_thread.daemon = True
    run_thread.start()
    '''


def exit_handler():
    try:
        thread_pool_executor.shutdown(wait=False)
    except NameError:
        pass
    root.destroy()


def back_button_click():
    global root, original_stdout, x
    try:
        utils.stopped = True
        x.cancel()
        # thread_pool_executor.shutdown(wait=True)
        sys.stdout = original_stdout
    except NameError:
        pass
    root.destroy()
    CNNConfigurations.vp_start_gui()
    root = None


class Progress_Screen:
    def __init__(self, top=None):
        """
            This class configures and populates the toplevel window.
            top is the toplevel containing window.
        """
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        w = 886
        h = 363
        ws = top.winfo_screenwidth()
        hs = top.winfo_screenheight()
        x = (ws / 2) - (w / 2)
        y = (hs / 2) - (h / 2)
        top.geometry('%dx%d+%d+%d' % (w, h, x, y))

        # top.geometry("886x363+402+341")
        top.resizable(False, False)
        top.title("Al-Ghazali's Authorship Attribution")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(x=380, y=10, height=50)
        self.TSeparator1.configure(orient="vertical")

        self.main_ghazali_label = tk.Label(top)
        self.main_ghazali_label.place(x=80, y=20, height=27, width=245)
        self.main_ghazali_label.configure(activebackground="#f9f9f9")
        self.main_ghazali_label.configure(activeforeground="black")
        self.main_ghazali_label.configure(anchor='nw')
        self.main_ghazali_label.configure(background="#ffffff")
        self.main_ghazali_label.configure(disabledforeground="#a3a3a3")
        self.main_ghazali_label.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.main_ghazali_label.configure(foreground="#629b1c")
        self.main_ghazali_label.configure(highlightbackground="#d9d9d9")
        self.main_ghazali_label.configure(highlightcolor="black")
        self.main_ghazali_label.configure(text='''Progress''')

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(x=10, y=5, height=60, width=70)
        self.TLabel1.configure(background="#ffffff")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='center')
        photo_location = os.path.join("GuiFiles/Al-Ghazali-Top.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.TLabel1.configure(image=_img0)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(x=0, y=300, height=65, width=885)
        self.Frame1.configure(background="#eeeeee")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label2 = tk.Label(top)
        self.Label2.place(x=390, y=23, height=21, width=324)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 10")
        self.Label2.configure(foreground="#9d9d9d")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Here you can see the training progress''')

        self.start_training_button = tk.Button(top, command=start_training_click)
        self.start_training_button.place(x=340, y=315, height=33, width=188)
        self.start_training_button.configure(activebackground="#ececec")
        self.start_training_button.configure(activeforeground="#000000")
        self.start_training_button.configure(background="#629b1c")
        self.start_training_button.configure(disabledforeground="#a3a3a3")
        self.start_training_button.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.start_training_button.configure(foreground="#ffffff")
        self.start_training_button.configure(highlightbackground="#d9d9d9")
        self.start_training_button.configure(highlightcolor="#000000")
        self.start_training_button.configure(pady="0")
        self.start_training_button.configure(text='''Start''')

        self.view_results_button = tk.Button(top, command=show_results_button_click)
        self.view_results_button.place(x=680, y=315, height=33, width=188)
        self.view_results_button.configure(activebackground="#ececec")
        self.view_results_button.configure(activeforeground="#000000")
        self.view_results_button.configure(background="#c0c0c0")
        self.view_results_button.configure(disabledforeground="#a3a3a3")
        self.view_results_button.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.view_results_button.configure(foreground="#ffffff")
        self.view_results_button.configure(highlightbackground="#d9d9d9")
        self.view_results_button.configure(highlightcolor="#000000")
        self.view_results_button.configure(pady="0")
        self.view_results_button.configure(relief="flat")
        self.view_results_button.configure(state='disabled')
        self.view_results_button.configure(text='''View Results''')

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(x=20, y=72, width=840)

        self.output_Text = tk.Text(top)
        self.output_Text.place(x=40, y=140, height=144, width=804)
        self.output_Text.configure(background="white")
        self.output_Text.configure(font="TkTextFont")
        self.output_Text.configure(foreground="black")
        self.output_Text.configure(highlightbackground="#d9d9d9")
        self.output_Text.configure(highlightcolor="black")
        self.output_Text.configure(insertbackground="black")
        self.output_Text.configure(selectbackground="blue")
        self.output_Text.configure(selectforeground="white")
        self.output_Text.configure(wrap="word")

        self.progress_bar = ttk.Progressbar(top)
        self.progress_bar.place(x=240, y=97, width=400, height=22)
        self.progress_bar.configure(length="400")

        self.back_button = tk.Button(top, command=back_button_click)
        self.back_button.place(x=20, y=315, height=33, width=188)
        self.back_button.configure(activebackground="#ececec")
        self.back_button.configure(activeforeground="#000000")
        self.back_button.configure(background="#a5b388")
        self.back_button.configure(disabledforeground="#a3a3a3")
        self.back_button.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.back_button.configure(foreground="#ffffff")
        self.back_button.configure(highlightbackground="#d9d9d9")
        self.back_button.configure(highlightcolor="#000000")
        self.back_button.configure(pady="0")
        self.back_button.configure(relief="flat")
        self.back_button.configure(text='''Back''')

        utils.log_content = None
